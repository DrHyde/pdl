#
# Proj.pd - PP def file for the Proj4->PDL interface.
#
# COPYRIGHT NOTICE:
#
# Copyright 2003 Judd Taylor, USF Institute for Marine Remote Sensing (judd@marine.usf.edu).
#
# Now GPL!
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
use strict;

use vars qw( $VERSION );
$VERSION = "1.32";

# when switch to Alien::Proj4 as separate module
# use Alien::Proj4;
pp_addpm({At=>'Top'},<<'EODOC');
=head1 NAME

PDL::GIS::Proj - PDL interface to the Proj4 projection library.

=head1 DESCRIPTION

PDL interface to the Proj4 projection library.

For more information on the proj library, see: http://www.remotesensing.org/proj/
EODOC

pp_addpm({At=>'Bot'},<<'EODOC');
=head1 AUTHOR

Judd Taylor, Orbital Systems, Ltd.
judd dot t at orbitalsystems dot com

=head1 COPYRIGHT NOTICE

Copyright 2003 Judd Taylor, USF Institute for Marine Remote Sensing (judd@marine.usf.edu).

GPL Now!

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

EODOC

#
# Header files:
#
pp_addhdr(<<'EOHDR');
#include "projects.h"
#include "proj_api.h"
#include <string.h>

EOHDR

pp_addpm(<<'EOPM');

=head2 fwd_transform($lon(pdl), $lat(pdl), $params)

Proj4 forward transformation $params is a string of the projection transformation
parameters.

Returns two pdls for x and y values respectively. The units are dependent on Proj4
behavior. They will be PDL->null if an error has occurred.

=for bad

Ignores bad elements of $lat and $lon, and sets the corresponding elements
of $x and $y to BAD

=cut


sub fwd_transform
{
    my ($lon, $lat, $params) = @_;
    my $x = null;
    my $y = null;

    #print "Projection transformation parameters: \'$params\'\n";

    _fwd_trans( $lon, $lat, $x, $y, $params );

    return ($x, $y);
} # End of fwd_transform()...

=head2 inv_transform($x(pdl), $y(pdl), $params)

Proj4 inverse transformation $params is a string of the projection transformation
parameters.

Returns two pdls for lat and lon values respectively. The units are dependent on Proj4
behavior. They will be PDL->null if an error has occurred.

=for bad

Ignores bad elements of $lat and $lon, and sets the corresponding elements
of $x and $y to BAD

=cut


sub inv_transform
{
    my ($x, $y, $params) = @_;
    my $lon = null;
    my $lat = null;

    #print "Projection transformation parameters: \'$params\'\n";

    _inv_trans( $x, $y, $lon, $lat, $params );
    return ($lon, $lat);
} # End of fwd_transform()...

=head2 get_proj_info($params_string)

Returns a string with information about what parameters proj will
actually use, this includes defaults, and +init=file stuff. It's 
the same as running 'proj -v'. It uses the proj command line, so
it might not work with all shells. I've tested it with bash.

=cut


sub get_proj_info
{
    my $params = shift;
    my @a = split(/\n/, `echo | proj -v $params`);
    pop(@a);
    return join("\n", @a);
} # End of get_proj_info()...

EOPM

pp_add_exported('', ' fwd_transform inv_transform get_proj_info ');

my $code_head = <<'EOF';
projUV in, out;
projPJ proj;
const double d2r = DEG_TO_RAD, r2d = RAD_TO_DEG;
/* Init the projection */
proj = pj_init_plus( $COMP(params) );
if( proj == NULL )
{
    $CROAK("%s: Projection initialization failed: %s\n", func, pj_strerrno(pj_errno));
}
/* Loop over the values converting as we go */
threadloop %{
EOF
my $code_foot = <<'EOF';
%}
pj_free(proj);
EOF

sub wrap_code {
  my ($name, $ins, $outs, $is_fwd) = @_;
  my $setup = <<EOF;
    in.u = \$$ins->[0]() @{[$is_fwd ? ' * d2r' : '']};
    in.v = \$$ins->[1]() @{[$is_fwd ? ' * d2r' : '']};
    out = pj_@{[$is_fwd ? 'fwd' : 'inv']}(in, proj);
    if (out.u == HUGE_VAL)
    {
EOF
  my $save = <<EOF;
    }
    \$$outs->[0]() = out.u@{[$is_fwd ? '' : ' * r2d']};
    \$$outs->[1]() = out.v@{[$is_fwd ? '' : ' * r2d']};
EOF
  my $body = $setup.<<EOF.$save;
        \$CROAK("%s: Projection conversion failed at (%f, %f): %s\\n",
                func, @{[ join ',', map '$'.$_.'()', @$ins ]}, pj_strerrno(pj_errno));
EOF
  my $code = join '', qq{char* func = "$name()";},
    $code_head,
    $body,
    $code_foot,
    ;
  my $badbody = <<EOF;
if ( @{[ join '||', map '$ISBAD('.$_.'())', @$ins ]} )
{
@{[ join "\n", map '$SETBAD('.$_.'());', @$outs ]}
}
else
{
$setup@{[ join "\n", map '$SETBAD('.$_.'());', @$outs ]}$save
}
EOF
  my $badcode = join '', qq{char* func = "$name\[BADCODE]()";},
    $code_head,
    $badbody,
    $code_foot,
    ;
  (Code => $code, BadCode => $badcode,
    GenericTypes => ['D'],
    OtherPars => 'char* params;',
    HandleBad => 1,
    );
}

#
# Forward transformation:
#
pp_def( '_fwd_trans',
        Pars => 'lon();
                 lat();
                 [o] x();
                 [o] y();',
        Doc => undef,
        wrap_code('_fwd_trans', [qw(lon lat)], [qw(x y)], 1),
);

#
# INPLACE Forward transformation: (Call this one directly)
#


pp_addpm( <<'ENDPM' );
#
# Wrapper sub for _fwd_trans_inplace that sets a default for the quiet variable.
# 
sub fwd_trans_inplace
{
    my $lon = shift;
    my $lat = shift;
    my $params = shift;
    
    _fwd_trans_inplace( $lon, $lat, $params );
} # End of fwd_trans_inplace()...

ENDPM

pp_add_exported('', 'fwd_trans_inplace');

pp_def( '_fwd_trans_inplace',
        Pars => '[io] lon();
                 [io] lat();',
        Doc => undef,
        wrap_code('_fwd_trans_inplace',[qw(lon lat)], [qw(lon lat)], 1),
);

#
# Inverse Transformation:
#
pp_def( '_inv_trans',
        Pars => 'x();
                 y();
                 [o] lon();
                 [o] lat();',
        Doc => undef,
        wrap_code('_inv_trans', [qw(x y)], [qw(lon lat)], 0),
);

#
# INPLACE Inverse Transformation: (call it directly)
#

pp_addpm( <<'ENDPM' );
#
# Wrapper sub for _fwd_trans_inplace that sets a default for the quiet variable.
# 
sub inv_trans_inplace
{
    my $lon = shift;
    my $lat = shift;
    my $params = shift;
    _inv_trans_inplace( $lon, $lat, $params );
} # End of fwd_trans_inplace()...

ENDPM

pp_add_exported('', 'inv_trans_inplace');

pp_def( '_inv_trans_inplace',
        Pars => '[io] x();
                 [io] y();',
        Doc => undef,
        wrap_code('_inv_trans_inplace', [qw(x y)], [qw(x y)], 0),
);

#
# Utility functions for getting projection description information (in a general case).
#

# when switch to Alien::Proj4 as separate module, replace with:
# pp_addpm(<<'ENDPM' );
# sub load_projection_descriptions {
#     return Alien::Proj4->load_projection_descriptions;
# }
# ENDPM
pp_addxs('', <<'ENDXS' );

HV* 
load_projection_descriptions()
    CODE:
        struct PJ_LIST *lp;
        SV* scalar_val;
        RETVAL = newHV();
        for (lp = pj_get_list_ref() ; lp->id ; ++lp) 
        {
            scalar_val  = newSVpv( *lp->descr, 0 );
            hv_store( RETVAL, lp->id, strlen( lp->id ), scalar_val, 0 );
        }
    OUTPUT:
        RETVAL

ENDXS
pp_add_exported('', ' load_projection_descriptions ');

#
# Perl code to finish loading the projetion information by parsing the descriptions:
#
# when switch to Alien::Proj4 as separate module, replace with:
# pp_addpm(<<'ENDPM' );
# sub load_projection_information {
#     return Alien::Proj4->load_projection_information;
# }
# ENDPM

pp_addpm( <<'ENDPM' );

my %SKIP = map +($_=>1), qw(
  and or Special for Madagascar
  fixed Earth For CH1903
);

sub load_projection_information
{
    my $descriptions = PDL::GIS::Proj::load_projection_descriptions();
    my $info = {};
    foreach my $projection ( sort keys %$descriptions )
    {
        my $description = $descriptions->{$projection};
        my $hash = {CODE => $projection};
        my @lines = split( /\n/, $description );
        chomp @lines;
        # Full name of this projection:
        ($hash->{NAME}, my $temp) = splice @lines, 0, 2;
        # The second line is usually a list of projection types this one is:
        $temp =~ s/no inv\.*,*//;
        $temp =~ s/or//;
        my @temp_types = split(/[,&\s]/, $temp );
        my @types = grep( /.+/, @temp_types );
        $hash->{CATEGORIES} = \@types;
        # If there's more than 2 lines, then it usually is a listing of parameters:
        # General parameters for all projections:
        $hash->{PARAMS}->{GENERAL} = 
            [ qw( x_0 y_0 lon_0 units init no_defs geoc over ) ];
        # Earth Figure Parameters:
        $hash->{PARAMS}->{EARTH} = 
            [ qw( ellps b f rf e es R R_A R_V R_a R_g R_h R_lat_g ) ];
        # Projection Specific Parameters:
        $hash->{PARAMS}{PROJ} = [
          grep !$SKIP{$_}, map {s/=//; s/[,\[\]]//sg; $_}
            grep length, map split(/\s+/), @lines
        ];
        # Can this projection do inverse?
        $hash->{INVERSE} = ( $description =~ /no inv/ ) ? 0 : 1;
        $info->{$projection} = $hash;
    }
    # A couple of overrides:
    #
    $info->{ob_tran}{PARAMS}{PROJ} =
        [ 'o_proj', 'o_lat_p', 'o_lon_p', 'o_alpha', 'o_lon_c', 
          'o_lat_c', 'o_lon_1', 'o_lat_1', 'o_lon_2', 'o_lat_2' ];
    $info->{nzmg}{CATEGORIES} = [ 'fixed Earth' ];
    return $info;
} # End of load_projection_information()...

ENDPM
pp_add_exported('', ' load_projection_information ');

pp_done();
